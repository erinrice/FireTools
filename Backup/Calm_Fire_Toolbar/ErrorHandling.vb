' --------------------------------------------------------------------------------
' Code generated automatically by Code Architects' VB Migration Partner
' --------------------------------------------------------------------------------

Option Strict Off      ' Code migrated from VB6 has Option Strict disabled by default

Friend Module ErrorHandling

	'******************************************************************************************************************
	'Date: 06 / 06 / 06
	'Author: FIMT
	'Description
	'Called By
	'Calls: None
	'Accepts
	'Returns: None
	'******************************************************************************************************************
	'
	' FILE AUTOMATICALLY GENERATED BY ESRI ERROR HANDLER ADDIN
	' DO NOT EDIT OR REMOVE THIS FILE FROM THE PROJECT
	'
	Private pErrorLog As New ErrorHandlerUI.ErrorDialogClass

	' UPGRADE_INFO (#0551): The 'sProcedureName' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	' UPGRADE_INFO (#0551): The 'sErrDescription' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	Private Sub DisplayVersion2Dialog(ByRef sProcedureName As String, ByRef sErrDescription As String)
		Beep()
		MsgBox6("An error has occured in the application.   Record the call stack sequence" & ControlChars.CrLf & "and the description of the error." & ControlChars.CrLf & ControlChars.CrLf & "Error Call Stack Sequence " & ControlChars.CrLf & ControlChars.Tab & sProcedureName & ControlChars.CrLf & sErrDescription, MsgBoxStyle.Exclamation + MsgBoxStyle.DefaultButton1, "Unexpected Program Error")
	End Sub

	' UPGRADE_INFO (#0551): The 'sProcedureName' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	' UPGRADE_INFO (#0551): The 'sErrDescription' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	' UPGRADE_INFO (#0551): The 'parentHWND' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	' UPGRADE_INFO (#0551): The 'raiseException' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	Private Sub DisplayVersion3Dialog(ByRef sProcedureName As String, ByRef sErrDescription As String, ByRef parentHWND As Integer, ByRef raiseException As Boolean)
		Beep()
		MsgBox6("An error has occured in the application.   Record the call stack sequence" & ControlChars.CrLf & "and the description of the error." & ControlChars.CrLf & ControlChars.CrLf & "Error Call Stack Sequence " & ControlChars.CrLf & ControlChars.Tab & sProcedureName & ControlChars.CrLf & sErrDescription, MsgBoxStyle.Exclamation + MsgBoxStyle.DefaultButton1, "Unexpected Program Error")
	End Sub

	' UPGRADE_INFO (#0551): The 'sProcedureName' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	' UPGRADE_INFO (#0551): The 'sErrDescription' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	' UPGRADE_INFO (#0551): The 'parentHWND' parameter is neither assigned in current method nor is passed to methods that modify it. Consider changing its declaration using the ByVal keyword.
	Private Sub DisplayVersion4Dialog(ByRef sProcedureName As String, ByRef sErrDescription As String, ByRef parentHWND As Integer)
		pErrorLog.AppendErrorText("Record Call Stack Sequence - Bottom line is error line." & ControlChars.CrLf & ControlChars.CrLf & ControlChars.Tab & sProcedureName & ControlChars.CrLf & sErrDescription)
		pErrorLog.Visible = True

	End Sub

	Public Sub HandleError(ByVal bTopProcedure As Boolean, ByVal sProcedureName As String, ByVal lErrNumber As Integer, ByVal sErrSource As String, ByVal sErrDescription As String, Optional ByVal version As Integer = 1, Optional ByVal parentHWND As Integer = 0, Optional ByVal reserved1 As Object = 0, Optional ByVal reserved2 As Object = 0, Optional ByVal reserved3 As Object = 0)
		' Generic Error handling Function - This function should be called with
		' the following Arguments
		'
		' Boolean    -in-  True if called from a top level procedure - Event / Method / Property
		' String     -in-  Name of function called from
		' Long       -in-  Error Number (retrieved from Err object)
		' String     -in-  Error Source (retrieved from Err object)
		' String     -in-  Error Description (retrieved from Err object)
		' Long       -in-  Version of Function (optional Default 1)
		' parentHWND -in-  Parent Hwnd for error dialogs, NULL is valid
		' reserved1  -in-
		' reserved2  -in-
		' reserved3  -in-

		' Clear the error object
		Err.Clear()
		
		' Static variable used to control the call stack formatting
		Static entered As Boolean
		
		Dim raiseError As Boolean
		If (bTopProcedure) Then
			' Top most procedure in call stack so report error to user
			' Via a dialog
			If (Not entered) Then
				sErrDescription = ControlChars.CrLf & "Error Number " & ControlChars.CrLf & ControlChars.Tab & CStr(lErrNumber) & ControlChars.CrLf & "Description" & ControlChars.CrLf & ControlChars.Tab & sErrDescription & ControlChars.CrLf & ControlChars.CrLf
			End If
			entered = False
			If (version = 4) Then
				DisplayVersion4Dialog(sProcedureName, sErrDescription, parentHWND)
			ElseIf (version = 3) Then
				DisplayVersion3Dialog(sProcedureName, sErrDescription, parentHWND, raiseError)
				If (raiseError) Then Err.Raise(lErrNumber, sErrSource, ControlChars.Tab & sProcedureName & ControlChars.CrLf & sErrDescription)
			ElseIf (version = 2) Then
				DisplayVersion2Dialog(sProcedureName, sErrDescription)
			Else
				Beep()
				MsgBox6("An error has occured in the application.   Record the call stack sequence" & ControlChars.CrLf & "and the description of the error." & ControlChars.CrLf & ControlChars.CrLf & "Error Call Stack Sequence " & ControlChars.CrLf & ControlChars.Tab & sProcedureName & ControlChars.CrLf & sErrDescription, MsgBoxStyle.Exclamation + MsgBoxStyle.DefaultButton1, "Unexpected Program Error")
			End If
		Else
			' An error has occured but we are not at the top of the call stack
			' so append the callstack and raise another error
			If (Not entered) Then sErrDescription = ControlChars.CrLf & "Error Number " & ControlChars.CrLf & ControlChars.Tab & CStr(lErrNumber) & ControlChars.CrLf & "Description" & ControlChars.CrLf & ControlChars.Tab & sErrDescription & ControlChars.CrLf & ControlChars.CrLf
			entered = True
			Err.Raise(lErrNumber, sErrSource, ControlChars.Tab & sProcedureName & ControlChars.CrLf & sErrDescription)
		End If
	End Sub

	Public Function GetErrorLineNumberString(ByVal lLineNumber As Integer) As String
		' Test the line number if it is non zero create a string
		If (lLineNumber <> 0) Then GetErrorLineNumberString = "Line : " & lLineNumber
	End Function

End Module
